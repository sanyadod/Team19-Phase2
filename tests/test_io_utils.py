"""
I/O Utilities Test Suite for Data Persistence and File Operations

This test suite validates the core file I/O operations that support the model evaluation
pipeline, including URL file processing and NDJSON output formatting. Essential for
ensuring reliable data ingestion and output generation across different deployment
environments and file system configurations.

Tests cover input validation, whitespace handling, JSON serialization integrity, and
output format compliance required for downstream data processing systems. Critical
for production reliability where file operations must handle various input formats
and edge cases encountered in enterprise environments.

Validation Coverage:
- URL file parsing with robust whitespace and blank line handling
- NDJSON output formatting for streaming data processing integration
- File system error handling and graceful degradation scenarios
- Cross-platform compatibility for diverse deployment environments
"""

import json

from acmecli.io_utils import read_urls, write_ndjson_line


def test_read_urls_skips_blanks(tmp_path):
    """
    Validate robust URL file parsing with automatic whitespace and blank line filtering.

    Ensures that the URL ingestion system gracefully handles real-world input files
    that contain formatting inconsistencies, blank lines, and whitespace variations.
    Critical for production environments where input files may be generated by
    different systems with varying formatting standards.

    The test validates:
    - Blank line filtering for clean data processing
    - Whitespace trimming for consistent URL formatting
    - Preservation of valid URLs in correct order
    - Graceful handling of mixed content formatting
    """
    p = tmp_path / "urls.txt"
    p.write_text("\nhttps://huggingface.co/gpt2\n   \nhttps://huggingface.co/datasets/squad\n")
    urls = list(read_urls(str(p)))
    assert urls == ["https://huggingface.co/gpt2", "https://huggingface.co/datasets/squad"]


def test_write_ndjson_line_writes_valid_json(capsys):
    """
    Verify NDJSON output formatting for streaming data processing compatibility.

    Validates that evaluation results are serialized in proper NDJSON format for
    integration with downstream data processing pipelines. Essential for enterprise
    workflows where evaluation outputs feed into data lakes, monitoring systems,
    and business intelligence platforms that expect structured JSON streaming.

    The test ensures:
    - Valid JSON serialization without formatting errors
    - NDJSON line-delimited format compliance
    - Data integrity preservation through serialization
    - Compatibility with standard JSON parsing libraries
    """
    d = {"a": 1, "b": "x"}
    write_ndjson_line(d)
    out = capsys.readouterr().out.strip()
    parsed = json.loads(out)
    assert parsed == d
